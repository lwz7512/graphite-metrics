#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

from subprocess import Popen, PIPE
from time import sleep, strftime
import os, sys, hashlib


import argparse
parser = argparse.ArgumentParser(
	description='Regenerate package metadata.')
optz = parser.parse_args()


from_git = os.path.basename(sys.argv[0]) == 'pre-commit'
if from_git:
	# Break immediately if there's no changes
	if not Popen(['git', 'diff', 'HEAD', '--quiet'], env=dict()).wait(): sys.exit()
	setup_hash = hashlib.md5(open('setup.py', 'rb').read()).hexdigest()\
		 if os.path.exists('setup.py') else ''

regen_docs = os.path.exists('README.md')\
	and not any(map(os.path.exists, ['README', 'README.rst']))

ver_minor = sum( 1 for i in Popen(['git', 'rev-list',
	'--since=%s'%strftime('01.%m.%Y'), 'master'], stdout=PIPE).stdout )

# Check for lame syntax errors
import py_compile
for src in ( line.strip() for line in
		Popen(['find', '-name', '*.py', '-print'], stdout=PIPE).stdout ):
	if src.endswith('.tpl.py'): continue # templates are, by definition, incomplete
	try: py_compile.compile(src, cfile='/dev/null', doraise=True)
	except py_compile.PyCompileError, err:
		print(
			'{} (file: {}):\n\t{}'.format(
				err.exc_type_name, err.file, err.exc_value ),
			file=sys.stderr )
		sys.exit(1)

# Regenerate setup.py
open('setup.py', 'w').write(
	open('_setup.tpl.py').read().format(
		version=strftime('%y.%m.{}').lstrip('0').format(ver_minor),
		warning=( '# This script is generated by {} script,'
			' any changes to it will be lost' ).format(sys.argv[0]) ) )

if regen_docs:
	# Regenerate README.pypi (ReST)
	try:
		md_to_html = Popen(['markdown_py', 'README.md'], stdout=PIPE, env=dict())
		html_to_text = Popen( ['lynx', '-dump', '-stdin'],
			stdin=md_to_html.stdout, stdout=open('README.pypi', 'wb'), env=dict() )
	except OSError as err:
		print('Failed to regenerate docs: {}'.format(err), file=sys.stderr)
		sys.exit(1)
	md_to_html.wait()
	html_to_text.wait()

if from_git:
	# Check if no changes to setup.py were made and pass the commit
	if hashlib.md5(open('setup.py', 'rb').read()).hexdigest() == setup_hash: sys.exit(0)

	# Reindex new files in background
	if not os.fork():
		os.setsid()
		while True:
			if os.path.exists('.git/index.lock'): sleep(0.2)
			else: break
		Popen(['git', 'add', 'setup.py', 'README.pypi'], env=dict()).wait()
		sys.exit()

	print('setup.py regenerated, re-initiate commit process manually', file=sys.stderr)
	sys.exit(1) # Break commit sequence
